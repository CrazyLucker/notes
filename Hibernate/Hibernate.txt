1. Что такое ORM
Это технология которая позволяет конвертировать данные Объектную модель в реляционную и обратно.

2. В чем преимущество ORM над JDBC драйвером?
Ускоряет разработку, предоставляет кэширование и потокобезопасный пул подключений SessionFactory.

3. Какие ORM вы занаете?
Hibernate, Spring DAO.

4. В чем удобство Hibernate?
Весь мапинг сущьности можно организовать при помощи xml.
Простое API для загрузки и выгрузки обектов из базы.
Если что-то изменено в тамблицах достаточно поправить xml маппинг.
Манипулирование комплексом ассоциированых с БД объектов-сущьностей.
Удобные стратегии выборки.

5. Какие базы потдерживает Hibernate?
    PostgreSQL, MySQL, Oracle.

6. Какие основные компоненты содержит Hibernate?
  Конфигурации в файлай hibernate.cfg.xml и для каждой сущьности в отдельности   Entity.hbm.xml

  SessionFactory создается с использованием файлов конфигурации. Фабрика физических подключений к базе.

  Session само подключение к базе.

  Transaction представляет конкретное обращение к базе.

  Query использует hql для создания конкретных инструкций обращения.(Привязывает параметры
лимитирует колличество результатов запроса и выполняет финальное выполнение запроса)

7. Каие обязательные проперти нужно указать в hibernate.cfg.xml?
  Диалект.
  Логин пароль url
  размер пула потоков.
  JDBC Driver.
  вкл/выкл автокоммит

8. Какие состояния могут быть у Entity?
  transient - объект не связанный с какой-либо сессией.
  persistent - объект связанный с открытой сессией
  detached - объект был связан с открытой сессией но сессия уже закрыта

9. Что делает Session.beginTransaction()?
  Начинает единицу работы с базой.

10. Что такое Criteria зачем и как?
  Criteria API это альтернатива HQl используется Session.createCriteria

11. Какой метод используется для создания hql и sql запросов?
  Session.createQuery() для hql
  Session.createSQLQuery() для sql

12. Какие требования к классу что-бы он был сущьностью?
  JavaBean стиль предполагает:
  Пустой конструктор
  Гетеры сеттеры на примапленные поля
  Не финальный
  Иметь id
  

13. Что является рутовым элементом в hbm.xml?
   <hibernate-mapping>

14. Какой тег в hbm.xml  определяет первичный ключ?
   <id> внутри для определения стратегии генерации используется <generator>

15. SessionFactory это потокобезопасный объект?
   Да.

16. Session  это потокобезопасный объект?
   Нет.

17. Какая разница между Session.save() и Session.persist()?
   save() возвращает id после вставки а persist() - void

18. Какая разница между get() и load()?
   Если данные не найдены get вернет null, а load() кинет ObjectNotFoundException
   get() возвращает проинициализированый объект а load() proxy объект
   

19. Как производятся основные CRUD операции?
  Session.delete, 
  Session.get 
  Session.create
  Session.createOrUpdate,
  Session.update

20. Каким методом можно обновить состояние объекта до актуального?
  Session.refresh

21. Что такое persistence классы?
  Те которые будут храниться в таблицах.

22. Какие аттрибуты есть у <property> в hbm.xml?
  name имя поля, column имя колонки, type тип

23. Как мапить коллекции в в hbm.xml?
  По имени интерфейса с маленькой буквы <set> <list> <map>
  Либо <bag> и <idbag> у второй можно использовать индекс

24. Как создать связь многие ко многим?
  Можно использовать <set> для указателей на промежуточную таблицу.

25. Что такое ленивая загрузка?
  Это когда в объект подгружаются только базовые поля, а те что хранятся в других таблицах нет.

26. Что такое кеш первого уровня?
  Это обязательный кеш объекта Session через который проходят все запросы. Сессия сохраняет объект до того как оправит в БД.

27. Что такое кеш второго уровня?
  Это необязательный кеш и кеш первого уровня всегда будет проверен первым

28. Что такое кеширование запросов?
  Реализует кеширование запросов которой тесно связано с кешем второго уровня.
  Это требует хранения времени когда таблица была изменена в последний раз, актуально только запросов часто исполняемых с одними и теме же параметрами.

29. Что такое стратегии concurrency?

  Transactional и Read-write - если очень важно предотвратить получение устаревших данных

  Nonstrict-read-write: - не гарантирует синхронизации кеша с базой

  Read-only: только для данных которые никогда не меняются.
  


