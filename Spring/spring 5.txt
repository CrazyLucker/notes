1)Что такое spring?

Spring - фракмворк для ускорения разработки, могут быть использованы в любом Java приложении.
 Преимещества:
 
 1. Возможность использовать Dependency Injection для разделения приложения на слои. И спринг сам управляет этими зависимостями.
 2. Управляет конфигураций приложения.
 3. Есть возможности для работы со всеми слоями приложения: Spring MVC, Data.
 
 ===================================================
 
 2)Какие модули есть у spring?
 Core
 Bean
 Context
 JDBC module
 ORM module
 Web module
 Web-Servlet module
 Java Messaging Service(JMS) module
 
 Как конфигурируется spring?
 xml и аннотациями указываем где искать классы помеченные @Conponent
 
 ===================================================
 
 3) Что такое Dependency Injection?
 
 В контексте спринга это означает что мы не создаем зависимости а указываем как их создавать
 при помощи @Autowared и каонфигураций если не хотим что-бы это был синглтон.
 
 ===================================================
 
 4)Каковы различные типы IoC (инъекция зависимостей)?
 
 На основе конструктора и на основе сеттеров.
 
 ===================================================
 
 5)Какой DI вы выберете на основе конструктора или сетера?
 
 Для обязательных полей - конструктор, а для необязательных сетер.
 
 ===================================================
 
 6)Какие преимущества IOC
 
 1.Меньше кода.
 2.Упрощает тестирование.
 
 ===================================================
 
 7) Что такое Spring IoC container?
 
 Управляет жизненным циклом объектов.
 
 ===================================================
 
 8) Какие типы IoC containers? Объясните их.
 
 Есть 2 типа IoC containers:
 
  Bean Factory - обеспечивает базовую поддержку DI, обычно для экономии ресурсов железа.
  
  Spring ApplicationContext Container - читает конфигурационные файлы.
  
  ===================================================
 
 9) Приведите пример имплементации BeanFactory.
 
 XmlBeanFactory можно написать 
 
 ClassPathXmlApplicationContext context =
            new ClassPathXmlApplicationContext("spring-context.xml");
            
            И из контекста получить бин:
            
            DAOMemory bean = context.getBean(MyComponentClass.class);
            
 ===================================================
 
 10) Какие есть реализации ApplicationContext?
 
 Есть 3 основные:
 
 1.FileSystemXmlApplicationContext загружает конфиг но требует полный путь к нему.
 
 2.ClassPathXmlApplicationContext загружает конфиг требует установить CLASSPATH в web.xml как contextConfigLocation
 
 3.WebXmlApplicationContext загружает конфиг для всех компонентов для web приложения.
 
 ===================================================
 
 11) Какая разница между Bean Factory и ApplicationContext?
 
 ApplicationContext некая общая область видимости приложения которая дает возможность пердавать текст,
 загружать файлы, и создавать слушателей.
 
 А Bean Factory это фабрика бинов которая создает конкретные инстансы.
 
 ===================================================
 
 12) Что такое бины?
 
Это объекты которые появляются в результате работы спринг и им и управляются.

 ===================================================
 
 13) Что содержит bean definition?
  Как создать компонент
  Информация о жизненном цикле Bean
  Зависимости Bean
 
 ===================================================
 14)Как вы предоставляете метаданные конфигурации в контейнер Spring?
 
 XML-файл конфигурации.
 Настройка на основе аннотаций
 
  ===================================================
15)Как определить будет бин каждый раз новый или синглтон?

Нужно объявить в <property его как прототип либо синглтон.
===================================================
16)Какие области бинов поддерживают Spring? Объясните их.

По дефолту singleton

1.Spring Framework поддерживает следующие пять областей, три из которых доступны, только если вы используете веб-приложение ApplicationContext.

2.Singleton - этот параметр привязывает определение компонента к одному экземпляру на контейнер Spring IoC.

3.Prototype - для определения одного экземпляра объекта используется одно определение компонента.

4.Request - это определение определения компонента для HTTP-запроса. Действует только в контексте веб-контекста Spring ApplicationContext.

5.Session - это определение определения компонента для сеанса HTTP. Действует только в контексте веб-контекста Spring ApplicationContext.

6.Global-session - это определение определения компонента для глобального сеанса HTTP. Действует только в контексте веб-контекста Spring ApplicationContext.

===================================================

17) Какой жизненный цикл у бина?

Instantiate. Сначала весенний контейнер находит определение bean-файла из файла XML и создает экземпляр компонента.

Заполнение свойств. Используя инъекцию зависимостей, весна заполняет все свойства, как указано в определении компонента.

Set Bean Name - Если bean реализует интерфейс BeanNameAware, весна передает идентификатор bean's в метод setBeanName ().

Set Bean factory - если Bean реализует интерфейс BeanFactoryAware, весна передает метод beanfactory методу setBeanFactory ().

Предварительная инициализация - также называется постпроцессом компонента. Если есть какие-либо beanPostProcessors bean-компонента, связанные с bean-компонентом, Spring вызывает метод postProcesserBeforeInitialization ().

Инициализация beans - если bean реализует IntializingBean, вызывается метод afterPropertySet (). Если у компонента bean есть объявление метода init, вызывается указанный метод инициализации.

Post Initialization. Если есть какие-либо BeanPostProcessors, связанные с компонентом, будут вызваны их методы postProcessAfterInitialization ().

Готов к использованию - теперь компонент готов к использованию приложением.

Destroy - если bean реализует DisposableBean, он вызовет метод destroy ().

===================================================

17)Что можно указать в <bean />?

Элемент <bean /> внутри элементов <property /> или <constructor-arg /> определяет так называемый внутренний компонент. Определение внутреннего бина не требует определенного идентификатора или имени; Контейнер игнорирует эти значения. Он также игнорирует флаг области. Внутренние бины всегда анонимны, и они всегда рассматриваются как прототипы.
===================================================
18)Как можно делать инъекцию объектов коллекций в бин

<list> - список значений, позволяя дублировать.

<set> - набор значений, но без каких-либо дубликатов.

<map> - ставка коллекции пар имя-значение, где имя и значение могут быть любого типа.

<props> - для вставки коллекции пар имя-значение, где имя и значение - это строки.

===================================================

19) Что такое auto wiring?

Контейнер Spring способен автоматически связывать отношения между сотрудничающими компонентами. Это означает, что можно автоматически разрешить сопутствующие роли Spring (другие компоненты) для вашего компонента, проверив содержимое BeanFactory без использования элементов <constructor-arg> и <property>.

Включается <context: annotation-config />.
===================================================

20) Какими бывают auto wiring?

Есть 5 режимов автоинъекции в спринг:

1.No - Это значение по умолчанию, отсутствие аутсорсинга, создание блинов в ручную.

2.byName - Autwiring по названию свойства. Контейнер Spring проверяет свойства компонентов, для которых атрибут autwire установлен в значение name в файле конфигурации XML. Затем он пытается сопоставить и связать свои свойства с компонентами, определенными теми же именами в файле конфигурации.

3.ByType - Autowiring по типу данных свойства. Контейнер Spring проверяет свойства компонентов, на которые атрибут autwire установлен вType в файле конфигурации XML. Затем он пытается сопоставить и связать свойство, если его тип совпадает с одним из имени beans в файле конфигурации. Если существует более одного такого компонента, генерируется фатальное исключение.

4.constructor - Подобно byType, но тип применяется к аргументам конструктора. Если в контейнере нет только одного компонента типа аргумента конструктора, возникает фатальная ошибка.

5.Autodetect - Spring сначала пытается подключиться с помощью autwire конструктором, если он не работает, Spring пытается autwire by byType.

===================================================

What are the limitations with autowiring?
===================================================

21) Что такое конфигурация контейнера на основе аннотаций?

 Вместо того, чтобы использовать XML для описания компоновки компонентов, разработчик перемещает конфигурацию в сам класс компонента, используя аннотации для соответствующего класса, метода или объявления поля.


===================================================
22) What does @Required annotation mean?
В этой аннотации просто указывается, что указанное свойство bean-компонента должно быть заполнено во время настройки, через явное значение свойства в определении компонента или при автоподготовке. Контейнер выбрасывает исключение BeanInitializationException, если поврежденное свойство bean не было заполнено.

===================================================
23) What does @Autowired annotation mean?
Аннотацию @Autowired можно использовать для автосохранения bean-компонента по методу setter, как @Required аннотация, конструктор, свойство или методы с произвольными именами и / или несколькими аргументами.
===================================================
24)What does @Qualifier annotation mean?
Может возникнуть ситуация, когда вы создаете более одного компонента одного типа и хотите связать только один из них с свойством, в этом случае вы можете использовать аннотацию @Qualifier вместе с @Autowired, чтобы удалить путаницу, указав, какой именно компонент Будет подключен.

===================================================
25) Что такое JSR-250 Annotations? Объясните их.

Spring имеет аннотации на основе JSR-250, которые включают аннотации @PostConstruct, @PreDestroy и @Resource.

@PostConstruct - эта аннотация может использоваться как альтернатива обратного вызова инициализации.

@PreDestroy - эта аннотация может использоваться как альтернатива обратного вызова разрушения.

@Resource - эта аннотация может использоваться для полей или методов сеттера. Аннотации @Resource берут атрибут «имя», который будет интерпретироваться как имя компонента, которое должно быть введено. Вы можете сказать, что это подразумевает семантику автоповторения по имени.
===================================================

26)Что такое конфигурация Spring на Java? Приведите пример аннотации.

Параметр конфигурации на основе Java позволяет вам писать большую часть конфигурации Spring без XML, но с помощью нескольких аннотаций на основе Java.

Например: Annotation @Configuration указывает, что класс может использоваться контейнером Spring IoC в качестве источника определений bean-компонентов. Аннотирование @Bean сообщает Spring, что метод, аннотированный с помощью @Bean, вернет объект, который должен быть зарегистрирован как компонент в контексте приложения Spring.

===================================================
27)Как происходит обработка событий spring?
Обработка событий в ApplicationContext предоставляется через интерфейс ApplicationEvent и ApplicationListener. Поэтому, если bean реализует ApplicationListener, то каждый раз, когда ApplicationEvent публикуется в ApplicationContext, этот компонент уведомляется.
===================================================
28)Опишите некоторые из стандартных событий Spring.


Spring предоставляет следующие стандартные события -

ContextRefreshedEvent - это событие публикуется, когда ApplicationContext инициализируется или обновляется. Это также можно повысить с помощью метода refresh () на интерфейсе ConfigurableApplicationContext.

ContextStartedEvent - это событие публикуется при запуске ApplicationContext с использованием метода start () на интерфейсе ConfigurableApplicationContext. Вы можете опросить свою базу данных, или вы можете повторно запустить любое остановленное приложение после получения этого события.

ContextStoppedEvent - это событие публикуется, когда ApplicationContext останавливается с использованием метода stop () в интерфейсе ConfigurableApplicationContext. Вы можете выполнить требуемую работу по дому после получения этого события.

ContextClosedEvent - это событие публикуется, когда ApplicationContext закрывается с помощью метода close () в интерфейсе ConfigurableApplicationContext. Закрытый контекст достигает своего конца жизни; Он не может быть обновлен или перезапущен.

RequestHandledEvent - это веб-событие, сообщающее всем бобам, что HTTP-запрос был обслужит.
===================================================
29)Что такое аспект?
Модуль, который имеет набор API, обеспечивающих сквозные требования. Например, модуль регистрации будет называться AOP-аспект для ведения журнала. Приложение может иметь любое количество аспектов в зависимости от требования. В Spring AOP аспекты реализуются с использованием обычных классов (подход на основе схемы) или обычных классов, аннотированных аннотацией @Aspect (стиль @AspectJ).
===================================================
30)В чем разница между заботой и сквозной проблемой в Spring AOP?

Концерн - Концерн - это поведение, которое мы хотим иметь в модуле приложения. Концерн может быть определен как функциональность, которую мы хотим реализовать. Вопросы, в которых мы заинтересованы, определяют наши проблемы.

Перекрестная озабоченность - это проблема, которая применима во всем приложении, и она затрагивает все приложение. например Регистрация, безопасность и передача данных - это проблемы, которые необходимы практически для каждого модуля приложения, следовательно, это сквозные проблемы.
===================================================
31)Что такое точка соединения?
Это представляет собой точку в вашем приложении, где вы можете подключать AOP-аспект. Вы также можете сказать, что это фактическое место в приложении, где действие будет выполнено с использованием Spring AOP framework.
===================================================

32)Что такое Advice?
Это фактическое действие, которое должно быть выполнено до или после выполнения метода. Это фактический фрагмент кода, который вызывается во время выполнения программы Spring AOP framework.
===================================================

33)Что такое Pointcut?
Это набор из одной или нескольких точек соединения, где должен быть выполнен совет. Вы можете указать pointcuts, используя выражения или шаблоны, как мы увидим в наших примерах AOP.

Что такое введение?
Внедрение новых методов или атрибутов к существующим классам.

Что такое объект Цель?
Объект, который сообщается один или несколько аспектов, этот объект всегда будет прокси-объектом. Также упоминается как рекомендуемый объект.

Что такое ткачество?
Ткачество - это процесс связывания с другими типами приложений или объектами для создания рекомендуемого объекта.

Каковы различные точки, в которых можно использовать ткачество?
Ткачество может выполняться во время компиляции, времени загрузки или во время выполнения.

Какие типы советов?
Весенние аспекты могут работать с пятью видами советов, пометыми ниже -

Перед - запустить совет перед выполнением метода.

After-Run после запуска метод независимо от его результата.

after-returns - Запустить совет после выполнения метода, только если метод завершен успешно.

after-throwing - запускать совет после выполнения метода только в том случае, если метод завершается путем исключения.

вокруг - запускать совет до и после вызова рекомендуемого метода.

Что такое реализация на основе XML-схемы?
Аспекты реализуются с использованием обычных классов вместе с конфигурацией на основе XML.

Что такое @AspectJ? Основанный на промежутотах реализации?
@AspectJ относится к стилю объявления аспектов как обычных классов Java, аннотированных аннотациями Java 5.

Как JDBC можно использовать более эффективно в весенних рамках?
JDBC можно использовать более эффективно с помощью класса шаблонов, предоставляемого Spring Framework, называемого JdbcTemplate.

Как использовать JdbcTemplate?
С использованием Spring JDBC кардинально снижается бремя управления ресурсами и обработки ошибок. Таким образом, разработчики оставляют записи операторов и запросов для получения данных в базе данных и из нее. JdbcTemplate предоставляет множество удобных методов для таких операций, как преобразование данных баз данных в примитивы или объекты, выполнение подготовленных и вызываемых операторов и предоставление пользовательской обработки ошибок базы данных.

Каковы типы поддержки управления транзакциями Весна?
Spring поддерживает два типа управления транзакциями -

Управление программными транзакциями - это означает, что вы выполнили транзакцию с помощью программирования. Это дает вам максимальную гибкость, но его трудно поддерживать.

Декларативное управление транзакциями. Это означает, что вы отдельно управляете транзакциями из бизнес-кода. Для управления транзакциями используются только аннотации или XML-конфигурация.

Какой из более выше типов управления транзакциями является предпочтительным?
Декларативное управление транзакциями предпочтительнее, чем программное управление транзакциями, хотя оно менее гибко, чем программное управление транзациями, что позволяет контролировать транзакции через ваш код.

Что такое Spring MVC framework?
Spring Web MVC framework обеспечивает архитектуру модели-вида-контроллера и готовые компоненты, которые могут использоваться для разработки гибких и слабо связанных веб-приложений. Шаблон MVC приводит к разделению различных аспектов приложения (логика ввода, бизнес-логика и логика пользовательского интерфейса), обеспечивая при этом свободную связь между этими элементами.

Что такое диспетчер?
Рамка Spring Web MVC профиль вокруг DispatcherServlet, которая обрабатывает все HTTP-запросы и ответы.

Что такое WebApplicationContext?
WebApplicationContext является расширением простого ApplicationContext, который имеет некоторые дополнительные функции, необходимые для веб-приложений. Он отличается от обычного ApplicationContext тем, что он может решать темы и знает, с каким сервлетом он связан.

В чем преимущества Spring MVC над Struts MVC?
Ниже приведены некоторые из преимуществ Spring MVC над Struts MVC -

Spring MVC очень универсален и гибко основан на интерфейсах, но Struts заставляет действия и объект Form в конкретное наследование.

Spring обеспечивает как перехватчики, так и контроллеры, таким образом, помогает отделить общее поведение от обработки многих запросов.

Весна может быть настроена с использованием различных технологий просмотра, таких как Freemarker, JSP, Tiles, Velocity, XLST и т. Д., А также вы можете создать свой собственный механизм просмотра, реализовав интерфейс Spring View.

Весной контроллеры MVC могут быть сконфигурированы с использованием DI (IOC), что упрощает его тестирование и интеграцию.

Веб-уровень Spring MVC легко тестируется, чем веб-уровень Struts, из-за избежания принудительного наследования конкретных ячеек и явной зависимости контроллеров от сервлетов диспетчера.

Struts заставляют ваши контроллеры расширять класс Struts, но Spring нет, есть много вариантов реализации Controller, которые вы можете расширить.

В Struts, действия связаны с представлением, определяя ActionForwards в ActionMapping или глобально. SpringMVC имеет интерфейс HandlerMapping для поддержки этой функции.

С помощью Struts валидация обычно выполняется (реализуется) в методе validate для ActionForm. В SpringMVC валидаторы - это бизнес-объекты, которые НЕ зависят от API сервлета, которые заставляют эти валидаторы повторно использоваться в вашей бизнес-логике, прежде чем продолжать объект домена в базе данных.

Что такое контроллер в Spring MVC?
Контроллеры обеспечивают доступ к поведению приложения, которое вы обычно определяете через интерфейс службы. Контроллеры интерпретируют ввод пользователя и преобразуют его в модель, представленную пользователю по представлению. Spring реализует контроллер очень абстрактным образом, что позволяет создавать множество контроллеров.

Объясните аннотацию @Controller.
Аннотация @Controller указывает, что конкретный класс выполняет роль контроллера. Spring не требует расширения любого базового класса контроллера или ссылки на Servlet API.

Объяснить аннотацию @RequestMapping.
Аннотирование @RequestMapping используется для сопоставления URL-адреса либо целому классу, либо конкретному методу обработчика.

Каковы способы доступа к Hibernate с помощью Spring?
Существует два способа доступа к спящему режиму с использованием пружины -

Инверсия управления с шаблоном Hibernate и обратным вызовом.

Расширение HibernateDAOSupport и применение узла перехватчика AOP.

Что поддерживает ORM Spring?
Spring поддерживает следующие ORM -

Hibernate
iBatis
JPA (Java Persistence API)
TopLink
JDO (Java Data Objects)
OJB
===================================================
===================================================
===================================================
===================================================
===================================================
===================================================
===================================================
===================================================

